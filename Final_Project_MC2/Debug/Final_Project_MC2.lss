
Final_Project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00001e48  00001edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080017e  0080017e  00001ffa  2**0
                  ALLOC
  3 .stab         0000225c  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001207  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000545f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  0000559f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b12  00000000  00000000  00005734  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ead  00000000  00000000  00007246  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5d  00000000  00000000  000080f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ae  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000896  00000000  00000000  0000935e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 0a 	call	0x1412	; 0x1412 <main>
      8a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__+0x18>

00000692 <__floatsisf>:
     692:	a8 e0       	ldi	r26, 0x08	; 8
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__prologue_saves__+0x12>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	88 27       	eor	r24, r24
     6ac:	b7 fd       	sbrc	r27, 7
     6ae:	83 95       	inc	r24
     6b0:	99 27       	eor	r25, r25
     6b2:	aa 27       	eor	r26, r26
     6b4:	bb 27       	eor	r27, r27
     6b6:	b8 2e       	mov	r11, r24
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	41 05       	cpc	r20, r1
     6be:	51 05       	cpc	r21, r1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <__floatsisf+0x36>
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	3a c0       	rjmp	.+116    	; 0x73c <__floatsisf+0xaa>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x64>
     6cc:	20 30       	cpi	r18, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	38 07       	cpc	r19, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	48 07       	cpc	r20, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	58 07       	cpc	r21, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__floatsisf+0x54>
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	9f ec       	ldi	r25, 0xCF	; 207
     6e4:	30 c0       	rjmp	.+96     	; 0x746 <__floatsisf+0xb4>
     6e6:	ee 24       	eor	r14, r14
     6e8:	ff 24       	eor	r15, r15
     6ea:	87 01       	movw	r16, r14
     6ec:	e2 1a       	sub	r14, r18
     6ee:	f3 0a       	sbc	r15, r19
     6f0:	04 0b       	sbc	r16, r20
     6f2:	15 0b       	sbc	r17, r21
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__floatsisf+0x68>
     6f6:	79 01       	movw	r14, r18
     6f8:	8a 01       	movw	r16, r20
     6fa:	8e e1       	ldi	r24, 0x1E	; 30
     6fc:	c8 2e       	mov	r12, r24
     6fe:	d1 2c       	mov	r13, r1
     700:	dc 82       	std	Y+4, r13	; 0x04
     702:	cb 82       	std	Y+3, r12	; 0x03
     704:	ed 82       	std	Y+5, r14	; 0x05
     706:	fe 82       	std	Y+6, r15	; 0x06
     708:	0f 83       	std	Y+7, r16	; 0x07
     70a:	18 87       	std	Y+8, r17	; 0x08
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__clzsi2>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	18 16       	cp	r1, r24
     718:	19 06       	cpc	r1, r25
     71a:	84 f4       	brge	.+32     	; 0x73c <__floatsisf+0xaa>
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__floatsisf+0x96>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__floatsisf+0x8e>
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 1a       	sub	r12, r24
     736:	d9 0a       	sbc	r13, r25
     738:	dc 82       	std	Y+4, r13	; 0x04
     73a:	cb 82       	std	Y+3, r12	; 0x03
     73c:	ba 82       	std	Y+2, r11	; 0x02
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__epilogue_restores__+0x12>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__epilogue_restores__+0x20>

000007f6 <__clzsi2>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	7b 01       	movw	r14, r22
     800:	8c 01       	movw	r16, r24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e8 16       	cp	r14, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	f8 06       	cpc	r15, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 07       	cpc	r16, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	18 07       	cpc	r17, r24
     812:	88 f4       	brcc	.+34     	; 0x836 <__clzsi2+0x40>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	e8 16       	cp	r14, r24
     818:	f1 04       	cpc	r15, r1
     81a:	01 05       	cpc	r16, r1
     81c:	11 05       	cpc	r17, r1
     81e:	31 f0       	breq	.+12     	; 0x82c <__clzsi2+0x36>
     820:	28 f0       	brcs	.+10     	; 0x82c <__clzsi2+0x36>
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__clzsi2+0x64>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	12 c0       	rjmp	.+36     	; 0x85a <__clzsi2+0x64>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	e8 16       	cp	r14, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	f8 06       	cpc	r15, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 07       	cpc	r16, r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	18 07       	cpc	r17, r24
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x5c>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <__clzsi2+0x64>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__clzsi2+0x7e>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <__clzsi2+0x76>
     878:	f7 01       	movw	r30, r14
     87a:	e8 59       	subi	r30, 0x98	; 152
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	28 1b       	sub	r18, r24
     882:	31 09       	sbc	r19, r1
     884:	41 09       	sbc	r20, r1
     886:	51 09       	sbc	r21, r1
     888:	c9 01       	movw	r24, r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <__pack_f>:
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	fc 01       	movw	r30, r24
     8a0:	e4 80       	ldd	r14, Z+4	; 0x04
     8a2:	f5 80       	ldd	r15, Z+5	; 0x05
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	d1 80       	ldd	r13, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__pack_f+0x2e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e1       	ldi	r26, 0x10	; 16
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 2a       	or	r14, r24
     8ba:	f9 2a       	or	r15, r25
     8bc:	0a 2b       	or	r16, r26
     8be:	1b 2b       	or	r17, r27
     8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <__pack_f+0x178>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__pack_f+0x34>
     8c6:	9f c0       	rjmp	.+318    	; 0xa06 <__pack_f+0x172>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__pack_f+0x40>
     8cc:	ee 24       	eor	r14, r14
     8ce:	ff 24       	eor	r15, r15
     8d0:	87 01       	movw	r16, r14
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__pack_f+0x4a>
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	01 05       	cpc	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__pack_f+0x50>
     8de:	e0 e0       	ldi	r30, 0x00	; 0
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	96 c0       	rjmp	.+300    	; 0xa10 <__pack_f+0x17c>
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	73 81       	ldd	r23, Z+3	; 0x03
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	62 38       	cpi	r22, 0x82	; 130
     8ec:	79 07       	cpc	r23, r25
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__pack_f+0x5e>
     8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <__pack_f+0x114>
     8f2:	22 e8       	ldi	r18, 0x82	; 130
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	26 1b       	sub	r18, r22
     8f8:	37 0b       	sbc	r19, r23
     8fa:	2a 31       	cpi	r18, 0x1A	; 26
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f0       	brlt	.+10     	; 0x90a <__pack_f+0x76>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	2a c0       	rjmp	.+84     	; 0x95e <__pack_f+0xca>
     90a:	b8 01       	movw	r22, r16
     90c:	a7 01       	movw	r20, r14
     90e:	02 2e       	mov	r0, r18
     910:	04 c0       	rjmp	.+8      	; 0x91a <__pack_f+0x86>
     912:	76 95       	lsr	r23
     914:	67 95       	ror	r22
     916:	57 95       	ror	r21
     918:	47 95       	ror	r20
     91a:	0a 94       	dec	r0
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__pack_f+0x7e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__pack_f+0x9c>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	2a 95       	dec	r18
     932:	d2 f7       	brpl	.-12     	; 0x928 <__pack_f+0x94>
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	8e 21       	and	r24, r14
     93c:	9f 21       	and	r25, r15
     93e:	a0 23       	and	r26, r16
     940:	b1 23       	and	r27, r17
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	21 f0       	breq	.+8      	; 0x952 <__pack_f+0xbe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9a 01       	movw	r18, r20
     954:	ab 01       	movw	r20, r22
     956:	28 2b       	or	r18, r24
     958:	39 2b       	or	r19, r25
     95a:	4a 2b       	or	r20, r26
     95c:	5b 2b       	or	r21, r27
     95e:	da 01       	movw	r26, r20
     960:	c9 01       	movw	r24, r18
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	90 70       	andi	r25, 0x00	; 0
     966:	a0 70       	andi	r26, 0x00	; 0
     968:	b0 70       	andi	r27, 0x00	; 0
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	39 f4       	brne	.+14     	; 0x982 <__pack_f+0xee>
     974:	27 ff       	sbrs	r18, 7
     976:	09 c0       	rjmp	.+18     	; 0x98a <__pack_f+0xf6>
     978:	20 5c       	subi	r18, 0xC0	; 192
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	4f 4f       	sbci	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0xf6>
     982:	21 5c       	subi	r18, 0xC1	; 193
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	4f 4f       	sbci	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 30       	cpi	r18, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	3a 07       	cpc	r19, r26
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	4a 07       	cpc	r20, r26
     998:	a0 e4       	ldi	r26, 0x40	; 64
     99a:	5a 07       	cpc	r21, r26
     99c:	10 f0       	brcs	.+4      	; 0x9a2 <__pack_f+0x10e>
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	79 01       	movw	r14, r18
     9a4:	8a 01       	movw	r16, r20
     9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <__pack_f+0x162>
     9a8:	60 38       	cpi	r22, 0x80	; 128
     9aa:	71 05       	cpc	r23, r1
     9ac:	64 f5       	brge	.+88     	; 0xa06 <__pack_f+0x172>
     9ae:	fb 01       	movw	r30, r22
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	d8 01       	movw	r26, r16
     9b6:	c7 01       	movw	r24, r14
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0x144>
     9ca:	e7 fe       	sbrs	r14, 7
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__pack_f+0x154>
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x14c>
     9d8:	8f e3       	ldi	r24, 0x3F	; 63
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 0e       	add	r14, r24
     9e2:	f9 1e       	adc	r15, r25
     9e4:	0a 1f       	adc	r16, r26
     9e6:	1b 1f       	adc	r17, r27
     9e8:	17 ff       	sbrs	r17, 7
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__pack_f+0x162>
     9ec:	16 95       	lsr	r17
     9ee:	07 95       	ror	r16
     9f0:	f7 94       	ror	r15
     9f2:	e7 94       	ror	r14
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	16 95       	lsr	r17
     9fa:	07 95       	ror	r16
     9fc:	f7 94       	ror	r15
     9fe:	e7 94       	ror	r14
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__pack_f+0x164>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x17c>
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	87 01       	movw	r16, r14
     a0c:	ef ef       	ldi	r30, 0xFF	; 255
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	6e 2f       	mov	r22, r30
     a12:	67 95       	ror	r22
     a14:	66 27       	eor	r22, r22
     a16:	67 95       	ror	r22
     a18:	90 2f       	mov	r25, r16
     a1a:	9f 77       	andi	r25, 0x7F	; 127
     a1c:	d7 94       	ror	r13
     a1e:	dd 24       	eor	r13, r13
     a20:	d7 94       	ror	r13
     a22:	8e 2f       	mov	r24, r30
     a24:	86 95       	lsr	r24
     a26:	49 2f       	mov	r20, r25
     a28:	46 2b       	or	r20, r22
     a2a:	58 2f       	mov	r21, r24
     a2c:	5d 29       	or	r21, r13
     a2e:	b7 01       	movw	r22, r14
     a30:	ca 01       	movw	r24, r20
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <__unpack_f>:
     a3e:	fc 01       	movw	r30, r24
     a40:	db 01       	movw	r26, r22
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	62 2f       	mov	r22, r18
     a4a:	6f 77       	andi	r22, 0x7F	; 127
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	22 1f       	adc	r18, r18
     a50:	22 27       	eor	r18, r18
     a52:	22 1f       	adc	r18, r18
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	89 2f       	mov	r24, r25
     a58:	88 0f       	add	r24, r24
     a5a:	82 2b       	or	r24, r18
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	99 1f       	adc	r25, r25
     a62:	99 27       	eor	r25, r25
     a64:	99 1f       	adc	r25, r25
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	21 15       	cp	r18, r1
     a6e:	31 05       	cpc	r19, r1
     a70:	a9 f5       	brne	.+106    	; 0xadc <__unpack_f+0x9e>
     a72:	41 15       	cp	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__unpack_f+0x42>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	37 c0       	rjmp	.+110    	; 0xaee <__unpack_f+0xb0>
     a80:	82 e8       	ldi	r24, 0x82	; 130
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	6a 95       	dec	r22
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <__unpack_f+0x54>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	8c 93       	st	X, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <__unpack_f+0x80>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	20 30       	cpi	r18, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	38 07       	cpc	r19, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	48 07       	cpc	r20, r24
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	58 07       	cpc	r21, r24
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__unpack_f+0x66>
     ace:	14 96       	adiw	r26, 0x04	; 4
     ad0:	2d 93       	st	X+, r18
     ad2:	3d 93       	st	X+, r19
     ad4:	4d 93       	st	X+, r20
     ad6:	5c 93       	st	X, r21
     ad8:	17 97       	sbiw	r26, 0x07	; 7
     ada:	08 95       	ret
     adc:	2f 3f       	cpi	r18, 0xFF	; 255
     ade:	31 05       	cpc	r19, r1
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__unpack_f+0xc2>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <__unpack_f+0xb4>
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
     af0:	08 95       	ret
     af2:	64 ff       	sbrs	r22, 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <__unpack_f+0xbe>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <__unpack_f+0xe2>
     afc:	1c 92       	st	X, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <__unpack_f+0xe2>
     b00:	2f 57       	subi	r18, 0x7F	; 127
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	3c 93       	st	X, r19
     b08:	2e 93       	st	-X, r18
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	8c 93       	st	X, r24
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <__unpack_f+0xd4>
     b1e:	70 64       	ori	r23, 0x40	; 64
     b20:	14 96       	adiw	r26, 0x04	; 4
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	17 97       	sbiw	r26, 0x07	; 7
     b2c:	08 95       	ret

00000b2e <__fpcmp_parts_f>:
     b2e:	1f 93       	push	r17
     b30:	dc 01       	movw	r26, r24
     b32:	fb 01       	movw	r30, r22
     b34:	9c 91       	ld	r25, X
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__fpcmp_parts_f+0xe>
     b3a:	47 c0       	rjmp	.+142    	; 0xbca <__fpcmp_parts_f+0x9c>
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f4       	brcc	.+2      	; 0xb44 <__fpcmp_parts_f+0x16>
     b42:	43 c0       	rjmp	.+134    	; 0xbca <__fpcmp_parts_f+0x9c>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	51 f4       	brne	.+20     	; 0xb5c <__fpcmp_parts_f+0x2e>
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	1c 91       	ld	r17, X
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	99 f5       	brne	.+102    	; 0xbb6 <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	68 2f       	mov	r22, r24
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 1b       	sub	r22, r17
     b58:	71 09       	sbc	r23, r1
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <__fpcmp_parts_f+0xac>
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fpcmp_parts_f+0x3a>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	31 f4       	brne	.+12     	; 0xb70 <__fpcmp_parts_f+0x42>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <__fpcmp_parts_f+0xa8>
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     b6e:	2d c0       	rjmp	.+90     	; 0xbca <__fpcmp_parts_f+0x9c>
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 91       	ld	r17, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	18 17       	cp	r17, r24
     b7e:	d9 f4       	brne	.+54     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2d 91       	ld	r18, X+
     b84:	3c 91       	ld	r19, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	bc f0       	brlt	.+46     	; 0xbc6 <__fpcmp_parts_f+0x98>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	0d 90       	ld	r0, X+
     ba0:	bc 91       	ld	r27, X
     ba2:	a0 2d       	mov	r26, r0
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	46 81       	ldd	r20, Z+6	; 0x06
     baa:	57 81       	ldd	r21, Z+7	; 0x07
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__fpcmp_parts_f+0x8e>
     bb6:	11 23       	and	r17, r17
     bb8:	41 f0       	breq	.+16     	; 0xbca <__fpcmp_parts_f+0x9c>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	a4 07       	cpc	r26, r20
     bc2:	b5 07       	cpc	r27, r21
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fpcmp_parts_f+0xa8>
     bc6:	11 23       	and	r17, r17
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__fpcmp_parts_f+0xac>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__fpcmp_parts_f+0xac>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	cb 01       	movw	r24, r22
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <GPIO_setupPinDirection+0x6>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <GPIO_setupPinDirection+0x8>
     be8:	0f 92       	push	r0
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	6a 83       	std	Y+2, r22	; 0x02
     bf2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	88 30       	cpi	r24, 0x08	; 8
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <GPIO_setupPinDirection+0x1c>
     bfa:	d5 c0       	rjmp	.+426    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	84 30       	cpi	r24, 0x04	; 4
     c00:	08 f0       	brcs	.+2      	; 0xc04 <GPIO_setupPinDirection+0x24>
     c02:	d1 c0       	rjmp	.+418    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3d 83       	std	Y+5, r19	; 0x05
     c0c:	2c 83       	std	Y+4, r18	; 0x04
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	9d 81       	ldd	r25, Y+5	; 0x05
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <GPIO_setupPinDirection+0x3a>
     c18:	43 c0       	rjmp	.+134    	; 0xca0 <GPIO_setupPinDirection+0xc0>
     c1a:	2c 81       	ldd	r18, Y+4	; 0x04
     c1c:	3d 81       	ldd	r19, Y+5	; 0x05
     c1e:	22 30       	cpi	r18, 0x02	; 2
     c20:	31 05       	cpc	r19, r1
     c22:	2c f4       	brge	.+10     	; 0xc2e <GPIO_setupPinDirection+0x4e>
     c24:	8c 81       	ldd	r24, Y+4	; 0x04
     c26:	9d 81       	ldd	r25, Y+5	; 0x05
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	71 f0       	breq	.+28     	; 0xc48 <GPIO_setupPinDirection+0x68>
     c2c:	bc c0       	rjmp	.+376    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
     c2e:	2c 81       	ldd	r18, Y+4	; 0x04
     c30:	3d 81       	ldd	r19, Y+5	; 0x05
     c32:	22 30       	cpi	r18, 0x02	; 2
     c34:	31 05       	cpc	r19, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <GPIO_setupPinDirection+0x5a>
     c38:	5f c0       	rjmp	.+190    	; 0xcf8 <GPIO_setupPinDirection+0x118>
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	9d 81       	ldd	r25, Y+5	; 0x05
     c3e:	83 30       	cpi	r24, 0x03	; 3
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <GPIO_setupPinDirection+0x66>
     c44:	85 c0       	rjmp	.+266    	; 0xd50 <GPIO_setupPinDirection+0x170>
     c46:	af c0       	rjmp	.+350    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	a1 f4       	brne	.+40     	; 0xc76 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c4e:	aa e3       	ldi	r26, 0x3A	; 58
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	ea e3       	ldi	r30, 0x3A	; 58
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	48 2f       	mov	r20, r24
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 2e       	mov	r0, r18
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <GPIO_setupPinDirection+0x8c>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <GPIO_setupPinDirection+0x88>
     c70:	84 2b       	or	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	98 c0       	rjmp	.+304    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c76:	aa e3       	ldi	r26, 0x3A	; 58
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	ea e3       	ldi	r30, 0x3A	; 58
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	48 2f       	mov	r20, r24
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 2e       	mov	r0, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <GPIO_setupPinDirection+0xb4>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	0a 94       	dec	r0
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <GPIO_setupPinDirection+0xb0>
     c98:	80 95       	com	r24
     c9a:	84 23       	and	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	83 c0       	rjmp	.+262    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	a1 f4       	brne	.+40     	; 0xcce <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ca6:	a7 e3       	ldi	r26, 0x37	; 55
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e3       	ldi	r30, 0x37	; 55
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <GPIO_setupPinDirection+0xe4>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <GPIO_setupPinDirection+0xe0>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	6c c0       	rjmp	.+216    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     cce:	a7 e3       	ldi	r26, 0x37	; 55
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e3       	ldi	r30, 0x37	; 55
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <GPIO_setupPinDirection+0x10c>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <GPIO_setupPinDirection+0x108>
     cf0:	80 95       	com	r24
     cf2:	84 23       	and	r24, r20
     cf4:	8c 93       	st	X, r24
     cf6:	57 c0       	rjmp	.+174    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f4       	brne	.+40     	; 0xd26 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     cfe:	a4 e3       	ldi	r26, 0x34	; 52
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e4 e3       	ldi	r30, 0x34	; 52
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <GPIO_setupPinDirection+0x13c>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <GPIO_setupPinDirection+0x138>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	40 c0       	rjmp	.+128    	; 0xda6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d26:	a4 e3       	ldi	r26, 0x34	; 52
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e4 e3       	ldi	r30, 0x34	; 52
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <GPIO_setupPinDirection+0x164>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <GPIO_setupPinDirection+0x160>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	2b c0       	rjmp	.+86     	; 0xda6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d56:	a1 e3       	ldi	r26, 0x31	; 49
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 e3       	ldi	r30, 0x31	; 49
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <GPIO_setupPinDirection+0x194>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <GPIO_setupPinDirection+0x190>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	14 c0       	rjmp	.+40     	; 0xda6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d7e:	a1 e3       	ldi	r26, 0x31	; 49
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e1 e3       	ldi	r30, 0x31	; 49
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <GPIO_setupPinDirection+0x1bc>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <GPIO_setupPinDirection+0x1b8>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <GPIO_writePin+0x6>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <GPIO_writePin+0x8>
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	6a 83       	std	Y+2, r22	; 0x02
     dc8:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	88 30       	cpi	r24, 0x08	; 8
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <GPIO_writePin+0x1c>
     dd0:	d5 c0       	rjmp	.+426    	; 0xf7c <GPIO_writePin+0x1c6>
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	08 f0       	brcs	.+2      	; 0xdda <GPIO_writePin+0x24>
     dd8:	d1 c0       	rjmp	.+418    	; 0xf7c <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else{
		switch(port_num){
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	3d 83       	std	Y+5, r19	; 0x05
     de2:	2c 83       	std	Y+4, r18	; 0x04
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	91 05       	cpc	r25, r1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <GPIO_writePin+0x3a>
     dee:	43 c0       	rjmp	.+134    	; 0xe76 <GPIO_writePin+0xc0>
     df0:	2c 81       	ldd	r18, Y+4	; 0x04
     df2:	3d 81       	ldd	r19, Y+5	; 0x05
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	2c f4       	brge	.+10     	; 0xe04 <GPIO_writePin+0x4e>
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	9d 81       	ldd	r25, Y+5	; 0x05
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	71 f0       	breq	.+28     	; 0xe1e <GPIO_writePin+0x68>
     e02:	bc c0       	rjmp	.+376    	; 0xf7c <GPIO_writePin+0x1c6>
     e04:	2c 81       	ldd	r18, Y+4	; 0x04
     e06:	3d 81       	ldd	r19, Y+5	; 0x05
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <GPIO_writePin+0x5a>
     e0e:	5f c0       	rjmp	.+190    	; 0xece <GPIO_writePin+0x118>
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <GPIO_writePin+0x66>
     e1a:	85 c0       	rjmp	.+266    	; 0xf26 <GPIO_writePin+0x170>
     e1c:	af c0       	rjmp	.+350    	; 0xf7c <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value==LOGIC_HIGH){
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	a1 f4       	brne	.+40     	; 0xe4c <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
     e24:	ab e3       	ldi	r26, 0x3B	; 59
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	eb e3       	ldi	r30, 0x3B	; 59
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <GPIO_writePin+0x8c>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <GPIO_writePin+0x88>
     e46:	84 2b       	or	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	98 c0       	rjmp	.+304    	; 0xf7c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
     e4c:	ab e3       	ldi	r26, 0x3B	; 59
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	eb e3       	ldi	r30, 0x3B	; 59
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <GPIO_writePin+0xb4>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <GPIO_writePin+0xb0>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	83 c0       	rjmp	.+262    	; 0xf7c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH){
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
     e7c:	a8 e3       	ldi	r26, 0x38	; 56
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e8 e3       	ldi	r30, 0x38	; 56
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <GPIO_writePin+0xe4>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <GPIO_writePin+0xe0>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	6c c0       	rjmp	.+216    	; 0xf7c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
     ea4:	a8 e3       	ldi	r26, 0x38	; 56
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e8 e3       	ldi	r30, 0x38	; 56
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <GPIO_writePin+0x10c>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <GPIO_writePin+0x108>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	57 c0       	rjmp	.+174    	; 0xf7c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH){
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	a1 f4       	brne	.+40     	; 0xefc <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
     ed4:	a5 e3       	ldi	r26, 0x35	; 53
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e3       	ldi	r30, 0x35	; 53
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <GPIO_writePin+0x13c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <GPIO_writePin+0x138>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	40 c0       	rjmp	.+128    	; 0xf7c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
     efc:	a5 e3       	ldi	r26, 0x35	; 53
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e5 e3       	ldi	r30, 0x35	; 53
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_writePin+0x164>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_writePin+0x160>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	2b c0       	rjmp	.+86     	; 0xf7c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH){
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
     f2c:	a2 e3       	ldi	r26, 0x32	; 50
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e2 e3       	ldi	r30, 0x32	; 50
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <GPIO_writePin+0x194>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <GPIO_writePin+0x190>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	14 c0       	rjmp	.+40     	; 0xf7c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
     f54:	a2 e3       	ldi	r26, 0x32	; 50
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e2 e3       	ldi	r30, 0x32	; 50
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_writePin+0x1bc>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_writePin+0x1b8>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	00 d0       	rcall	.+0      	; 0xf92 <GPIO_readPin+0x6>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <GPIO_readPin+0x8>
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	8a 83       	std	Y+2, r24	; 0x02
     f9c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=LOGIC_LOW;
     f9e:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 30       	cpi	r24, 0x08	; 8
     fa4:	08 f0       	brcs	.+2      	; 0xfa8 <GPIO_readPin+0x1c>
     fa6:	84 c0       	rjmp	.+264    	; 0x10b0 <GPIO_readPin+0x124>
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <GPIO_readPin+0x24>
     fae:	80 c0       	rjmp	.+256    	; 0x10b0 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else{
		switch(port_num){
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3d 83       	std	Y+5, r19	; 0x05
     fb8:	2c 83       	std	Y+4, r18	; 0x04
     fba:	4c 81       	ldd	r20, Y+4	; 0x04
     fbc:	5d 81       	ldd	r21, Y+5	; 0x05
     fbe:	41 30       	cpi	r20, 0x01	; 1
     fc0:	51 05       	cpc	r21, r1
     fc2:	79 f1       	breq	.+94     	; 0x1022 <GPIO_readPin+0x96>
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	9d 81       	ldd	r25, Y+5	; 0x05
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	91 05       	cpc	r25, r1
     fcc:	34 f4       	brge	.+12     	; 0xfda <GPIO_readPin+0x4e>
     fce:	2c 81       	ldd	r18, Y+4	; 0x04
     fd0:	3d 81       	ldd	r19, Y+5	; 0x05
     fd2:	21 15       	cp	r18, r1
     fd4:	31 05       	cpc	r19, r1
     fd6:	69 f0       	breq	.+26     	; 0xff2 <GPIO_readPin+0x66>
     fd8:	6b c0       	rjmp	.+214    	; 0x10b0 <GPIO_readPin+0x124>
     fda:	4c 81       	ldd	r20, Y+4	; 0x04
     fdc:	5d 81       	ldd	r21, Y+5	; 0x05
     fde:	42 30       	cpi	r20, 0x02	; 2
     fe0:	51 05       	cpc	r21, r1
     fe2:	b9 f1       	breq	.+110    	; 0x1052 <GPIO_readPin+0xc6>
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	91 05       	cpc	r25, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <GPIO_readPin+0x64>
     fee:	49 c0       	rjmp	.+146    	; 0x1082 <GPIO_readPin+0xf6>
     ff0:	5f c0       	rjmp	.+190    	; 0x10b0 <GPIO_readPin+0x124>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
     ff2:	e9 e3       	ldi	r30, 0x39	; 57
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_readPin+0x7e>
    1006:	55 95       	asr	r21
    1008:	47 95       	ror	r20
    100a:	8a 95       	dec	r24
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_readPin+0x7a>
    100e:	ca 01       	movw	r24, r20
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	88 23       	and	r24, r24
    1016:	19 f0       	breq	.+6      	; 0x101e <GPIO_readPin+0x92>
				value=LOGIC_HIGH;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	49 c0       	rjmp	.+146    	; 0x10b0 <GPIO_readPin+0x124>
			}
			else{
				value=LOGIC_LOW;
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	47 c0       	rjmp	.+142    	; 0x10b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    1022:	e6 e3       	ldi	r30, 0x36	; 54
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_readPin+0xae>
    1036:	55 95       	asr	r21
    1038:	47 95       	ror	r20
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_readPin+0xaa>
    103e:	ca 01       	movw	r24, r20
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	88 23       	and	r24, r24
    1046:	19 f0       	breq	.+6      	; 0x104e <GPIO_readPin+0xc2>
				value=LOGIC_HIGH;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	31 c0       	rjmp	.+98     	; 0x10b0 <GPIO_readPin+0x124>
            }
			else{
				value=LOGIC_LOW;
    104e:	19 82       	std	Y+1, r1	; 0x01
    1050:	2f c0       	rjmp	.+94     	; 0x10b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    1052:	e3 e3       	ldi	r30, 0x33	; 51
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <GPIO_readPin+0xde>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <GPIO_readPin+0xda>
    106e:	ca 01       	movw	r24, r20
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	90 70       	andi	r25, 0x00	; 0
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <GPIO_readPin+0xf2>
				value=LOGIC_HIGH;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	19 c0       	rjmp	.+50     	; 0x10b0 <GPIO_readPin+0x124>
			}
			else{
				value=LOGIC_LOW;
    107e:	19 82       	std	Y+1, r1	; 0x01
    1080:	17 c0       	rjmp	.+46     	; 0x10b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    1082:	e0 e3       	ldi	r30, 0x30	; 48
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a9 01       	movw	r20, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_readPin+0x10e>
    1096:	55 95       	asr	r21
    1098:	47 95       	ror	r20
    109a:	8a 95       	dec	r24
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_readPin+0x10a>
    109e:	ca 01       	movw	r24, r20
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	90 70       	andi	r25, 0x00	; 0
    10a4:	88 23       	and	r24, r24
    10a6:	19 f0       	breq	.+6      	; 0x10ae <GPIO_readPin+0x122>
				value=LOGIC_HIGH;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <GPIO_readPin+0x124>
			}
			else{
				value=LOGIC_LOW;
    10ae:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	return value;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <GPIO_setupPortDirection+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <GPIO_setupPortDirection+0x8>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	90 f5       	brcc	.+100    	; 0x113c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3c 83       	std	Y+4, r19	; 0x04
    10e0:	2b 83       	std	Y+3, r18	; 0x03
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	91 05       	cpc	r25, r1
    10ea:	d1 f0       	breq	.+52     	; 0x1120 <GPIO_setupPortDirection+0x5e>
    10ec:	2b 81       	ldd	r18, Y+3	; 0x03
    10ee:	3c 81       	ldd	r19, Y+4	; 0x04
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	2c f4       	brge	.+10     	; 0x1100 <GPIO_setupPortDirection+0x3e>
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	61 f0       	breq	.+24     	; 0x1116 <GPIO_setupPortDirection+0x54>
    10fe:	1e c0       	rjmp	.+60     	; 0x113c <GPIO_setupPortDirection+0x7a>
    1100:	2b 81       	ldd	r18, Y+3	; 0x03
    1102:	3c 81       	ldd	r19, Y+4	; 0x04
    1104:	22 30       	cpi	r18, 0x02	; 2
    1106:	31 05       	cpc	r19, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_setupPortDirection+0x68>
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	83 30       	cpi	r24, 0x03	; 3
    1110:	91 05       	cpc	r25, r1
    1112:	81 f0       	breq	.+32     	; 0x1134 <GPIO_setupPortDirection+0x72>
    1114:	13 c0       	rjmp	.+38     	; 0x113c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1116:	ea e3       	ldi	r30, 0x3A	; 58
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	0e c0       	rjmp	.+28     	; 0x113c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	09 c0       	rjmp	.+18     	; 0x113c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
    1132:	04 c0       	rjmp	.+8      	; 0x113c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1134:	e1 e3       	ldi	r30, 0x31	; 49
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	80 83       	st	Z, r24
			break;
		}
	}
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <GPIO_writePort+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <GPIO_writePort+0x8>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	90 f5       	brcc	.+100    	; 0x11c4 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else{
		switch (port_num){
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3c 83       	std	Y+4, r19	; 0x04
    1168:	2b 83       	std	Y+3, r18	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <GPIO_writePort+0x5e>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	2c f4       	brge	.+10     	; 0x1188 <GPIO_writePort+0x3e>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	61 f0       	breq	.+24     	; 0x119e <GPIO_writePort+0x54>
    1186:	1e c0       	rjmp	.+60     	; 0x11c4 <GPIO_writePort+0x7a>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <GPIO_writePort+0x68>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <GPIO_writePort+0x72>
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA=value;
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	80 83       	st	Z, r24
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    11a8:	e8 e3       	ldi	r30, 0x38	; 56
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    11b2:	e5 e3       	ldi	r30, 0x35	; 53
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <GPIO_readPort+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <GPIO_readPort+0x8>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= NUM_OF_PORTS)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	84 30       	cpi	r24, 0x04	; 4
    11e4:	90 f5       	brcc	.+100    	; 0x124a <GPIO_readPort+0x78>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num){
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	d1 f0       	breq	.+52     	; 0x122e <GPIO_readPort+0x5c>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <GPIO_readPort+0x3c>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	61 f0       	breq	.+24     	; 0x1224 <GPIO_readPort+0x52>
    120c:	1e c0       	rjmp	.+60     	; 0x124a <GPIO_readPort+0x78>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <GPIO_readPort+0x66>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	81 f0       	breq	.+32     	; 0x1242 <GPIO_readPort+0x70>
    1222:	13 c0       	rjmp	.+38     	; 0x124a <GPIO_readPort+0x78>
		case PORTA_ID:
			value=PINA;
    1224:	e9 e3       	ldi	r30, 0x39	; 57
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	0e c0       	rjmp	.+28     	; 0x124a <GPIO_readPort+0x78>
			break;
		case PORTB_ID:
			value=PINB;
    122e:	e6 e3       	ldi	r30, 0x36	; 54
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	09 c0       	rjmp	.+18     	; 0x124a <GPIO_readPort+0x78>
			break;
		case PORTC_ID:
			value=PINC;
    1238:	e3 e3       	ldi	r30, 0x33	; 51
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	04 c0       	rjmp	.+8      	; 0x124a <GPIO_readPort+0x78>
			break;
		case PORTD_ID:
			value=PIND;
    1242:	e0 e3       	ldi	r30, 0x30	; 48
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <BUZZER>:
#define OPEN_DOOR 0xCC
#define BUZZ 0xFF

DcMotor_State state;
uint16 Motor_tick =0;
void BUZZER(void){
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
	buzzer_OFF();
    1262:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <buzzer_OFF>
	Timer0_Deinit();
    1266:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Timer0_Deinit>
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <MotorHandle>:
void MotorHandle(void){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	Motor_tick++;
    1278:	80 91 7e 01 	lds	r24, 0x017E
    127c:	90 91 7f 01 	lds	r25, 0x017F
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	90 93 7f 01 	sts	0x017F, r25
    1286:	80 93 7e 01 	sts	0x017E, r24
	if(Motor_tick==156){
    128a:	80 91 7e 01 	lds	r24, 0x017E
    128e:	90 91 7f 01 	lds	r25, 0x017F
    1292:	8c 39       	cpi	r24, 0x9C	; 156
    1294:	91 05       	cpc	r25, r1
    1296:	39 f4       	brne	.+14     	; 0x12a6 <MotorHandle+0x36>
		state=STOP;
    1298:	10 92 82 01 	sts	0x0182, r1
		DcMotor_Rotate(state,50);
    129c:	80 91 82 01 	lds	r24, 0x0182
    12a0:	62 e3       	ldi	r22, 0x32	; 50
    12a2:	0e 94 23 0b 	call	0x1646	; 0x1646 <DcMotor_Rotate>
	}

	if(Motor_tick==312){
    12a6:	80 91 7e 01 	lds	r24, 0x017E
    12aa:	90 91 7f 01 	lds	r25, 0x017F
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	88 33       	cpi	r24, 0x38	; 56
    12b2:	92 07       	cpc	r25, r18
    12b4:	71 f4       	brne	.+28     	; 0x12d2 <MotorHandle+0x62>

		state=CLOCKWISE;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 82 01 	sts	0x0182, r24
		DcMotor_Rotate(state,50);
    12bc:	80 91 82 01 	lds	r24, 0x0182
    12c0:	62 e3       	ldi	r22, 0x32	; 50
    12c2:	0e 94 23 0b 	call	0x1646	; 0x1646 <DcMotor_Rotate>
		Motor_tick=0;
    12c6:	10 92 7f 01 	sts	0x017F, r1
    12ca:	10 92 7e 01 	sts	0x017E, r1
		Timer0_Deinit();
    12ce:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Timer0_Deinit>



	}
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <StorePassword>:

void StorePassword(){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <StorePassword+0x6>
    12de:	0f 92       	push	r0
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<5; i++){
    12e4:	1b 82       	std	Y+3, r1	; 0x03
    12e6:	1a 82       	std	Y+2, r1	; 0x02
    12e8:	0d c0       	rjmp	.+26     	; 0x1304 <StorePassword+0x2c>
		uint8 key;
		key = UART_recieveByte();
    12ea:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <UART_recieveByte>
    12ee:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_writeByte(i, key);
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	69 81       	ldd	r22, Y+1	; 0x01
    12f6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <EEPROM_writeByte>

	}
}

void StorePassword(){
	for(int i=0; i<5; i++){
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	9b 83       	std	Y+3, r25	; 0x03
    1302:	8a 83       	std	Y+2, r24	; 0x02
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	9b 81       	ldd	r25, Y+3	; 0x03
    1308:	85 30       	cpi	r24, 0x05	; 5
    130a:	91 05       	cpc	r25, r1
    130c:	74 f3       	brlt	.-36     	; 0x12ea <StorePassword+0x12>
		uint8 key;
		key = UART_recieveByte();
		EEPROM_writeByte(i, key);
	}
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <VerifyPassword>:
void VerifyPassword(){
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	64 97       	sbiw	r28, 0x14	; 20
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
	uint8 val;
	int x=0;
    132e:	19 86       	std	Y+9, r1	; 0x09
    1330:	18 86       	std	Y+8, r1	; 0x08



	uint8 password[5];
	uint8 verify[5];
	for(int i=0; i<5; i++){
    1332:	1f 82       	std	Y+7, r1	; 0x07
    1334:	1e 82       	std	Y+6, r1	; 0x06
    1336:	11 c0       	rjmp	.+34     	; 0x135a <VerifyPassword+0x40>
		uint8 key;
		key = UART_recieveByte();
    1338:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <UART_recieveByte>
    133c:	8d 83       	std	Y+5, r24	; 0x05
		password[i]=key;
    133e:	2e 81       	ldd	r18, Y+6	; 0x06
    1340:	3f 81       	ldd	r19, Y+7	; 0x07
    1342:	ce 01       	movw	r24, r28
    1344:	0b 96       	adiw	r24, 0x0b	; 11
    1346:	fc 01       	movw	r30, r24
    1348:	e2 0f       	add	r30, r18
    134a:	f3 1f       	adc	r31, r19
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	80 83       	st	Z, r24



	uint8 password[5];
	uint8 verify[5];
	for(int i=0; i<5; i++){
    1350:	8e 81       	ldd	r24, Y+6	; 0x06
    1352:	9f 81       	ldd	r25, Y+7	; 0x07
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	9f 83       	std	Y+7, r25	; 0x07
    1358:	8e 83       	std	Y+6, r24	; 0x06
    135a:	8e 81       	ldd	r24, Y+6	; 0x06
    135c:	9f 81       	ldd	r25, Y+7	; 0x07
    135e:	85 30       	cpi	r24, 0x05	; 5
    1360:	91 05       	cpc	r25, r1
    1362:	54 f3       	brlt	.-44     	; 0x1338 <VerifyPassword+0x1e>
		key = UART_recieveByte();
		password[i]=key;


	}
	for(int i=0; i<5; i++){
    1364:	1c 82       	std	Y+4, r1	; 0x04
    1366:	1b 82       	std	Y+3, r1	; 0x03
    1368:	16 c0       	rjmp	.+44     	; 0x1396 <VerifyPassword+0x7c>
		EEPROM_readByte(i, &val);
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	9e 01       	movw	r18, r28
    1370:	26 5f       	subi	r18, 0xF6	; 246
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	b9 01       	movw	r22, r18
    1376:	0e 94 9c 0b 	call	0x1738	; 0x1738 <EEPROM_readByte>
		verify[i]=val;
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1380:	ce 01       	movw	r24, r28
    1382:	40 96       	adiw	r24, 0x10	; 16
    1384:	fc 01       	movw	r30, r24
    1386:	e2 0f       	add	r30, r18
    1388:	f3 1f       	adc	r31, r19
    138a:	40 83       	st	Z, r20
		key = UART_recieveByte();
		password[i]=key;


	}
	for(int i=0; i<5; i++){
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	9c 83       	std	Y+4, r25	; 0x04
    1394:	8b 83       	std	Y+3, r24	; 0x03
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	85 30       	cpi	r24, 0x05	; 5
    139c:	91 05       	cpc	r25, r1
    139e:	2c f3       	brlt	.-54     	; 0x136a <VerifyPassword+0x50>
		EEPROM_readByte(i, &val);
		verify[i]=val;

	}
	for(int i=0; i<5; i++){
    13a0:	1a 82       	std	Y+2, r1	; 0x02
    13a2:	19 82       	std	Y+1, r1	; 0x01
    13a4:	1c c0       	rjmp	.+56     	; 0x13de <VerifyPassword+0xc4>
		if(verify[i]==password[i]){x++;}
    13a6:	29 81       	ldd	r18, Y+1	; 0x01
    13a8:	3a 81       	ldd	r19, Y+2	; 0x02
    13aa:	ce 01       	movw	r24, r28
    13ac:	40 96       	adiw	r24, 0x10	; 16
    13ae:	fc 01       	movw	r30, r24
    13b0:	e2 0f       	add	r30, r18
    13b2:	f3 1f       	adc	r31, r19
    13b4:	40 81       	ld	r20, Z
    13b6:	29 81       	ldd	r18, Y+1	; 0x01
    13b8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ba:	ce 01       	movw	r24, r28
    13bc:	0b 96       	adiw	r24, 0x0b	; 11
    13be:	fc 01       	movw	r30, r24
    13c0:	e2 0f       	add	r30, r18
    13c2:	f3 1f       	adc	r31, r19
    13c4:	80 81       	ld	r24, Z
    13c6:	48 17       	cp	r20, r24
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <VerifyPassword+0xba>
    13ca:	88 85       	ldd	r24, Y+8	; 0x08
    13cc:	99 85       	ldd	r25, Y+9	; 0x09
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	99 87       	std	Y+9, r25	; 0x09
    13d2:	88 87       	std	Y+8, r24	; 0x08
	for(int i=0; i<5; i++){
		EEPROM_readByte(i, &val);
		verify[i]=val;

	}
	for(int i=0; i<5; i++){
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	85 30       	cpi	r24, 0x05	; 5
    13e4:	91 05       	cpc	r25, r1
    13e6:	fc f2       	brlt	.-66     	; 0x13a6 <VerifyPassword+0x8c>
		if(verify[i]==password[i]){x++;}

	}
	if(x==5){
    13e8:	88 85       	ldd	r24, Y+8	; 0x08
    13ea:	99 85       	ldd	r25, Y+9	; 0x09
    13ec:	85 30       	cpi	r24, 0x05	; 5
    13ee:	91 05       	cpc	r25, r1
    13f0:	21 f4       	brne	.+8      	; 0x13fa <VerifyPassword+0xe0>
		UART_sendByte(ACC);
    13f2:	8a ea       	ldi	r24, 0xAA	; 170
    13f4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_sendByte>
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <VerifyPassword+0xe6>
	}else
	{
		UART_sendByte('h');
    13fa:	88 e6       	ldi	r24, 0x68	; 104
    13fc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_sendByte>





}
    1400:	64 96       	adiw	r28, 0x14	; 20
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <main>:

int main(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	e0 97       	sbiw	r28, 0x30	; 48
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
	TIMER0_config_Type timer0_config={NORMAL_MODE,F_CPU_1024,0,0,NORMAL_MODE_OCO_DISCONNECTED};
    1426:	ce 01       	movw	r24, r28
    1428:	04 96       	adiw	r24, 0x04	; 4
    142a:	9e 8f       	std	Y+30, r25	; 0x1e
    142c:	8d 8f       	std	Y+29, r24	; 0x1d
    142e:	e9 e7       	ldi	r30, 0x79	; 121
    1430:	f1 e0       	ldi	r31, 0x01	; 1
    1432:	f8 a3       	std	Y+32, r31	; 0x20
    1434:	ef 8f       	std	Y+31, r30	; 0x1f
    1436:	f5 e0       	ldi	r31, 0x05	; 5
    1438:	f9 a3       	std	Y+33, r31	; 0x21
    143a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    143c:	f8 a1       	ldd	r31, Y+32	; 0x20
    143e:	00 80       	ld	r0, Z
    1440:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1442:	98 a1       	ldd	r25, Y+32	; 0x20
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	98 a3       	std	Y+32, r25	; 0x20
    1448:	8f 8f       	std	Y+31, r24	; 0x1f
    144a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    144c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    144e:	00 82       	st	Z, r0
    1450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1452:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	9e 8f       	std	Y+30, r25	; 0x1e
    1458:	8d 8f       	std	Y+29, r24	; 0x1d
    145a:	99 a1       	ldd	r25, Y+33	; 0x21
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	99 a3       	std	Y+33, r25	; 0x21
    1460:	e9 a1       	ldd	r30, Y+33	; 0x21
    1462:	ee 23       	and	r30, r30
    1464:	51 f7       	brne	.-44     	; 0x143a <main+0x28>
	UART_config_Type uart_config={DISABLED,BIT_1,BIT_8,9600};
    1466:	ce 01       	movw	r24, r28
    1468:	09 96       	adiw	r24, 0x09	; 9
    146a:	9b a3       	std	Y+35, r25	; 0x23
    146c:	8a a3       	std	Y+34, r24	; 0x22
    146e:	e2 e7       	ldi	r30, 0x72	; 114
    1470:	f1 e0       	ldi	r31, 0x01	; 1
    1472:	fd a3       	std	Y+37, r31	; 0x25
    1474:	ec a3       	std	Y+36, r30	; 0x24
    1476:	f7 e0       	ldi	r31, 0x07	; 7
    1478:	fe a3       	std	Y+38, r31	; 0x26
    147a:	ec a1       	ldd	r30, Y+36	; 0x24
    147c:	fd a1       	ldd	r31, Y+37	; 0x25
    147e:	00 80       	ld	r0, Z
    1480:	8c a1       	ldd	r24, Y+36	; 0x24
    1482:	9d a1       	ldd	r25, Y+37	; 0x25
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	9d a3       	std	Y+37, r25	; 0x25
    1488:	8c a3       	std	Y+36, r24	; 0x24
    148a:	ea a1       	ldd	r30, Y+34	; 0x22
    148c:	fb a1       	ldd	r31, Y+35	; 0x23
    148e:	00 82       	st	Z, r0
    1490:	8a a1       	ldd	r24, Y+34	; 0x22
    1492:	9b a1       	ldd	r25, Y+35	; 0x23
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	9b a3       	std	Y+35, r25	; 0x23
    1498:	8a a3       	std	Y+34, r24	; 0x22
    149a:	9e a1       	ldd	r25, Y+38	; 0x26
    149c:	91 50       	subi	r25, 0x01	; 1
    149e:	9e a3       	std	Y+38, r25	; 0x26
    14a0:	ee a1       	ldd	r30, Y+38	; 0x26
    14a2:	ee 23       	and	r30, r30
    14a4:	51 f7       	brne	.-44     	; 0x147a <main+0x68>
	I2C_config_Type i2c_config={0x02,0b00000001};
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	88 8b       	std	Y+16, r24	; 0x10
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 8b       	std	Y+17, r24	; 0x11
	Timer0_init(&timer0_config);
    14ae:	ce 01       	movw	r24, r28
    14b0:	04 96       	adiw	r24, 0x04	; 4
    14b2:	0e 94 9d 0c 	call	0x193a	; 0x193a <Timer0_init>
	UART_init(&uart_config);
    14b6:	ce 01       	movw	r24, r28
    14b8:	09 96       	adiw	r24, 0x09	; 9
    14ba:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <UART_init>
	TWI_init(&i2c_config);
    14be:	ce 01       	movw	r24, r28
    14c0:	40 96       	adiw	r24, 0x10	; 16
    14c2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <TWI_init>
	buzzer_init();
    14c6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <buzzer_init>
	DcMotor_Init();
    14ca:	0e 94 08 0b 	call	0x1610	; 0x1610 <DcMotor_Init>
    uint8 val;
    uint8 choice;
    StorePassword();
    14ce:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <StorePassword>
    for(int i=0; i<5; i++){
    14d2:	1a 82       	std	Y+2, r1	; 0x02
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	0d c0       	rjmp	.+26     	; 0x14f2 <main+0xe0>
		EEPROM_readByte(i, &val);
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	9e 01       	movw	r18, r28
    14de:	2e 5e       	subi	r18, 0xEE	; 238
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	b9 01       	movw	r22, r18
    14e4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <EEPROM_readByte>
	buzzer_init();
	DcMotor_Init();
    uint8 val;
    uint8 choice;
    StorePassword();
    for(int i=0; i<5; i++){
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	91 05       	cpc	r25, r1
    14fa:	74 f3       	brlt	.-36     	; 0x14d8 <main+0xc6>

	}

	while(1)
	{
		choice = UART_recieveByte();
    14fc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <UART_recieveByte>
    1500:	8b 83       	std	Y+3, r24	; 0x03
		if(choice == '+'){
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	8b 32       	cpi	r24, 0x2B	; 43
    1506:	11 f4       	brne	.+4      	; 0x150c <main+0xfa>
			VerifyPassword();
    1508:	0e 94 8d 09 	call	0x131a	; 0x131a <VerifyPassword>
		}
		if(choice=='-'){
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	8d 32       	cpi	r24, 0x2D	; 45
    1510:	11 f4       	brne	.+4      	; 0x1516 <main+0x104>
			StorePassword();
    1512:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <StorePassword>
		}
		if(choice==BUZZ){
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	8f 3f       	cpi	r24, 0xFF	; 255
    151a:	31 f5       	brne	.+76     	; 0x1568 <main+0x156>
			Timer0_setCallBack(BUZZER);
    151c:	8d e2       	ldi	r24, 0x2D	; 45
    151e:	99 e0       	ldi	r25, 0x09	; 9
    1520:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Timer0_setCallBack>
			buzzer_ON();
    1524:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <buzzer_ON>
			TIMER0_config_Type timer0_config={NORMAL_MODE,F_CPU_1024,0,0,NORMAL_MODE_OCO_DISCONNECTED};
    1528:	ce 01       	movw	r24, r28
    152a:	43 96       	adiw	r24, 0x13	; 19
    152c:	98 a7       	std	Y+40, r25	; 0x28
    152e:	8f a3       	std	Y+39, r24	; 0x27
    1530:	ed e6       	ldi	r30, 0x6D	; 109
    1532:	f1 e0       	ldi	r31, 0x01	; 1
    1534:	fa a7       	std	Y+42, r31	; 0x2a
    1536:	e9 a7       	std	Y+41, r30	; 0x29
    1538:	f5 e0       	ldi	r31, 0x05	; 5
    153a:	fb a7       	std	Y+43, r31	; 0x2b
    153c:	e9 a5       	ldd	r30, Y+41	; 0x29
    153e:	fa a5       	ldd	r31, Y+42	; 0x2a
    1540:	00 80       	ld	r0, Z
    1542:	89 a5       	ldd	r24, Y+41	; 0x29
    1544:	9a a5       	ldd	r25, Y+42	; 0x2a
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	9a a7       	std	Y+42, r25	; 0x2a
    154a:	89 a7       	std	Y+41, r24	; 0x29
    154c:	ef a1       	ldd	r30, Y+39	; 0x27
    154e:	f8 a5       	ldd	r31, Y+40	; 0x28
    1550:	00 82       	st	Z, r0
    1552:	8f a1       	ldd	r24, Y+39	; 0x27
    1554:	98 a5       	ldd	r25, Y+40	; 0x28
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	98 a7       	std	Y+40, r25	; 0x28
    155a:	8f a3       	std	Y+39, r24	; 0x27
    155c:	9b a5       	ldd	r25, Y+43	; 0x2b
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	9b a7       	std	Y+43, r25	; 0x2b
    1562:	eb a5       	ldd	r30, Y+43	; 0x2b
    1564:	ee 23       	and	r30, r30
    1566:	51 f7       	brne	.-44     	; 0x153c <main+0x12a>
}
		if(choice==OPEN_DOOR){
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	8c 3c       	cpi	r24, 0xCC	; 204
    156c:	39 f6       	brne	.-114    	; 0x14fc <main+0xea>
			Timer0_setCallBack(MotorHandle);
    156e:	88 e3       	ldi	r24, 0x38	; 56
    1570:	99 e0       	ldi	r25, 0x09	; 9
    1572:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <Timer0_setCallBack>
			state=ANTI_CLOCKWISE;
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	80 93 82 01 	sts	0x0182, r24
			DcMotor_Rotate(state,50);
    157c:	80 91 82 01 	lds	r24, 0x0182
    1580:	62 e3       	ldi	r22, 0x32	; 50
    1582:	0e 94 23 0b 	call	0x1646	; 0x1646 <DcMotor_Rotate>
			TIMER0_config_Type timer0_config={NORMAL_MODE,F_CPU_1024,0,0,NORMAL_MODE_OCO_DISCONNECTED};
    1586:	ce 01       	movw	r24, r28
    1588:	48 96       	adiw	r24, 0x18	; 24
    158a:	9d a7       	std	Y+45, r25	; 0x2d
    158c:	8c a7       	std	Y+44, r24	; 0x2c
    158e:	e8 e6       	ldi	r30, 0x68	; 104
    1590:	f1 e0       	ldi	r31, 0x01	; 1
    1592:	ff a7       	std	Y+47, r31	; 0x2f
    1594:	ee a7       	std	Y+46, r30	; 0x2e
    1596:	f5 e0       	ldi	r31, 0x05	; 5
    1598:	f8 ab       	std	Y+48, r31	; 0x30
    159a:	ee a5       	ldd	r30, Y+46	; 0x2e
    159c:	ff a5       	ldd	r31, Y+47	; 0x2f
    159e:	00 80       	ld	r0, Z
    15a0:	8e a5       	ldd	r24, Y+46	; 0x2e
    15a2:	9f a5       	ldd	r25, Y+47	; 0x2f
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	9f a7       	std	Y+47, r25	; 0x2f
    15a8:	8e a7       	std	Y+46, r24	; 0x2e
    15aa:	ec a5       	ldd	r30, Y+44	; 0x2c
    15ac:	fd a5       	ldd	r31, Y+45	; 0x2d
    15ae:	00 82       	st	Z, r0
    15b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    15b2:	9d a5       	ldd	r25, Y+45	; 0x2d
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	9d a7       	std	Y+45, r25	; 0x2d
    15b8:	8c a7       	std	Y+44, r24	; 0x2c
    15ba:	98 a9       	ldd	r25, Y+48	; 0x30
    15bc:	91 50       	subi	r25, 0x01	; 1
    15be:	98 ab       	std	Y+48, r25	; 0x30
    15c0:	e8 a9       	ldd	r30, Y+48	; 0x30
    15c2:	ee 23       	and	r30, r30
    15c4:	51 f7       	brne	.-44     	; 0x159a <main+0x188>
    15c6:	9a cf       	rjmp	.-204    	; 0x14fc <main+0xea>

000015c8 <buzzer_init>:
 */
#include"GPIO.h"
#include <avr/io.h>
#include "commonmacros.h"
#include "buzzer.h"
void buzzer_init(void){
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	65 e0       	ldi	r22, 0x05	; 5
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GPIO_setupPinDirection>
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <buzzer_ON>:
void buzzer_ON(void){
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	65 e0       	ldi	r22, 0x05	; 5
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <buzzer_OFF>:
void buzzer_OFF(void){
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	65 e0       	ldi	r22, 0x05	; 5
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
}
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <DcMotor_Init>:
 */
#include"dc_motor.h"
#include"commonmacros.h"
#include"GPIO.h"
#include"pwm_Driver.h"
void DcMotor_Init(void){
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,IN1,PIN_OUTPUT);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,IN2,PIN_OUTPUT);
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_PORT_ID,IN1,LOGIC_LOW);
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,IN2,LOGIC_LOW);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <DcMotor_Rotate+0x6>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	6a 83       	std	Y+2, r22	; 0x02
	if(state==1){
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	59 f4       	brne	.+22     	; 0x1670 <DcMotor_Rotate+0x2a>
		GPIO_writePin(DC_MOTOR_PORT_ID,IN1,LOGIC_LOW);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,IN2,LOGIC_HIGH);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <DcMotor_Rotate+0x60>
	}
	else if(state==0){
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	88 23       	and	r24, r24
    1674:	59 f4       	brne	.+22     	; 0x168c <DcMotor_Rotate+0x46>
		GPIO_writePin(DC_MOTOR_PORT_ID,IN1,LOGIC_LOW);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,IN2,LOGIC_LOW);
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <DcMotor_Rotate+0x60>
	}
	else if(state==2){
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	51 f4       	brne	.+20     	; 0x16a6 <DcMotor_Rotate+0x60>
		GPIO_writePin(DC_MOTOR_PORT_ID,IN1,LOGIC_HIGH);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,IN2,LOGIC_LOW);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	0e 94 db 06 	call	0xdb6	; 0xdb6 <GPIO_writePin>
	}
	PWM_Timer0_START(speed);
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <PWM_Timer0_START>
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <EEPROM_writeByte>:
 */
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <EEPROM_writeByte+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <EEPROM_writeByte+0x8>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16c8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16cc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    16d0:	88 30       	cpi	r24, 0x08	; 8
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <EEPROM_writeByte+0x22>
        return ERROR;
    16d4:	1c 82       	std	Y+4, r1	; 0x04
    16d6:	28 c0       	rjmp	.+80     	; 0x1728 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	80 70       	andi	r24, 0x00	; 0
    16de:	97 70       	andi	r25, 0x07	; 7
    16e0:	88 0f       	add	r24, r24
    16e2:	89 2f       	mov	r24, r25
    16e4:	88 1f       	adc	r24, r24
    16e6:	99 0b       	sbc	r25, r25
    16e8:	91 95       	neg	r25
    16ea:	80 6a       	ori	r24, 0xA0	; 160
    16ec:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16f0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    16f4:	88 31       	cpi	r24, 0x18	; 24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <EEPROM_writeByte+0x46>
        return ERROR;
    16f8:	1c 82       	std	Y+4, r1	; 0x04
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1702:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    1706:	88 32       	cpi	r24, 0x28	; 40
    1708:	11 f0       	breq	.+4      	; 0x170e <EEPROM_writeByte+0x58>
        return ERROR;
    170a:	1c 82       	std	Y+4, r1	; 0x04
    170c:	0d c0       	rjmp	.+26     	; 0x1728 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1714:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    1718:	88 32       	cpi	r24, 0x28	; 40
    171a:	11 f0       	breq	.+4      	; 0x1720 <EEPROM_writeByte+0x6a>
        return ERROR;
    171c:	1c 82       	std	Y+4, r1	; 0x04
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1720:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_stop>

    return SUCCESS;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	8c 83       	std	Y+4, r24	; 0x04
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <EEPROM_readByte+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <EEPROM_readByte+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	7c 83       	std	Y+4, r23	; 0x04
    174c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    174e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1752:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    1756:	88 30       	cpi	r24, 0x08	; 8
    1758:	11 f0       	breq	.+4      	; 0x175e <EEPROM_readByte+0x26>
        return ERROR;
    175a:	1d 82       	std	Y+5, r1	; 0x05
    175c:	44 c0       	rjmp	.+136    	; 0x17e6 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	80 70       	andi	r24, 0x00	; 0
    1764:	97 70       	andi	r25, 0x07	; 7
    1766:	88 0f       	add	r24, r24
    1768:	89 2f       	mov	r24, r25
    176a:	88 1f       	adc	r24, r24
    176c:	99 0b       	sbc	r25, r25
    176e:	91 95       	neg	r25
    1770:	80 6a       	ori	r24, 0xA0	; 160
    1772:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1776:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    177a:	88 31       	cpi	r24, 0x18	; 24
    177c:	11 f0       	breq	.+4      	; 0x1782 <EEPROM_readByte+0x4a>
        return ERROR;
    177e:	1d 82       	std	Y+5, r1	; 0x05
    1780:	32 c0       	rjmp	.+100    	; 0x17e6 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1788:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    178c:	88 32       	cpi	r24, 0x28	; 40
    178e:	11 f0       	breq	.+4      	; 0x1794 <EEPROM_readByte+0x5c>
        return ERROR;
    1790:	1d 82       	std	Y+5, r1	; 0x05
    1792:	29 c0       	rjmp	.+82     	; 0x17e6 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1794:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1798:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    179c:	80 31       	cpi	r24, 0x10	; 16
    179e:	11 f0       	breq	.+4      	; 0x17a4 <EEPROM_readByte+0x6c>
        return ERROR;
    17a0:	1d 82       	std	Y+5, r1	; 0x05
    17a2:	21 c0       	rjmp	.+66     	; 0x17e6 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	80 70       	andi	r24, 0x00	; 0
    17aa:	97 70       	andi	r25, 0x07	; 7
    17ac:	88 0f       	add	r24, r24
    17ae:	89 2f       	mov	r24, r25
    17b0:	88 1f       	adc	r24, r24
    17b2:	99 0b       	sbc	r25, r25
    17b4:	91 95       	neg	r25
    17b6:	81 6a       	ori	r24, 0xA1	; 161
    17b8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    17bc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    17c0:	80 34       	cpi	r24, 0x40	; 64
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <EEPROM_readByte+0x90>
        return ERROR;
    17c4:	1d 82       	std	Y+5, r1	; 0x05
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    17c8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <TWI_readByteWithNACK>
    17cc:	eb 81       	ldd	r30, Y+3	; 0x03
    17ce:	fc 81       	ldd	r31, Y+4	; 0x04
    17d0:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    17d2:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <TWI_getStatus>
    17d6:	88 35       	cpi	r24, 0x58	; 88
    17d8:	11 f0       	breq	.+4      	; 0x17de <EEPROM_readByte+0xa6>
        return ERROR;
    17da:	1d 82       	std	Y+5, r1	; 0x05
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    17de:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_stop>

    return SUCCESS;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <PWM_Timer0_START>:
 *      Author: DELL
 */
#include"commonmacros.h"
#include"pwm_Driver.h"
#include<avr/io.h>
void PWM_Timer0_START(uint8 duty_cycle){
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	0f 92       	push	r0
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	89 83       	std	Y+1, r24	; 0x01
GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	63 e0       	ldi	r22, 0x03	; 3
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GPIO_setupPinDirection>
TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<CS01)|(1<<COM01);
    1812:	e3 e5       	ldi	r30, 0x53	; 83
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	8a e6       	ldi	r24, 0x6A	; 106
    1818:	80 83       	st	Z, r24
OCR0=duty_cycle*2.55;
    181a:	0c e5       	ldi	r16, 0x5C	; 92
    181c:	10 e0       	ldi	r17, 0x00	; 0
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	aa 27       	eor	r26, r26
    1826:	97 fd       	sbrc	r25, 7
    1828:	a0 95       	com	r26
    182a:	ba 2f       	mov	r27, r26
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	23 e3       	ldi	r18, 0x33	; 51
    183e:	33 e3       	ldi	r19, 0x33	; 51
    1840:	43 e2       	ldi	r20, 0x23	; 35
    1842:	50 e4       	ldi	r21, 0x40	; 64
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	f8 01       	movw	r30, r16
    185a:	80 83       	st	Z, r24
TCNT0=0;
    185c:	e2 e5       	ldi	r30, 0x52	; 82
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	10 82       	st	Z, r1
}
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    186e:	1f 92       	push	r1
    1870:	0f 92       	push	r0
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	0f 92       	push	r0
    1876:	11 24       	eor	r1, r1
    1878:	2f 93       	push	r18
    187a:	3f 93       	push	r19
    187c:	4f 93       	push	r20
    187e:	5f 93       	push	r21
    1880:	6f 93       	push	r22
    1882:	7f 93       	push	r23
    1884:	8f 93       	push	r24
    1886:	9f 93       	push	r25
    1888:	af 93       	push	r26
    188a:	bf 93       	push	r27
    188c:	ef 93       	push	r30
    188e:	ff 93       	push	r31
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1898:	80 91 80 01 	lds	r24, 0x0180
    189c:	90 91 81 01 	lds	r25, 0x0181
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	29 f0       	breq	.+10     	; 0x18ae <__vector_9+0x40>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    18a4:	e0 91 80 01 	lds	r30, 0x0180
    18a8:	f0 91 81 01 	lds	r31, 0x0181
    18ac:	09 95       	icall
	}
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	ff 91       	pop	r31
    18b4:	ef 91       	pop	r30
    18b6:	bf 91       	pop	r27
    18b8:	af 91       	pop	r26
    18ba:	9f 91       	pop	r25
    18bc:	8f 91       	pop	r24
    18be:	7f 91       	pop	r23
    18c0:	6f 91       	pop	r22
    18c2:	5f 91       	pop	r21
    18c4:	4f 91       	pop	r20
    18c6:	3f 91       	pop	r19
    18c8:	2f 91       	pop	r18
    18ca:	0f 90       	pop	r0
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	0f 90       	pop	r0
    18d0:	1f 90       	pop	r1
    18d2:	18 95       	reti

000018d4 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    18fe:	80 91 80 01 	lds	r24, 0x0180
    1902:	90 91 81 01 	lds	r25, 0x0181
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	29 f0       	breq	.+10     	; 0x1914 <__vector_19+0x40>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    190a:	e0 91 80 01 	lds	r30, 0x0180
    190e:	f0 91 81 01 	lds	r31, 0x0181
    1912:	09 95       	icall
	}
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	ff 91       	pop	r31
    191a:	ef 91       	pop	r30
    191c:	bf 91       	pop	r27
    191e:	af 91       	pop	r26
    1920:	9f 91       	pop	r25
    1922:	8f 91       	pop	r24
    1924:	7f 91       	pop	r23
    1926:	6f 91       	pop	r22
    1928:	5f 91       	pop	r21
    192a:	4f 91       	pop	r20
    192c:	3f 91       	pop	r19
    192e:	2f 91       	pop	r18
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <Timer0_init>:
void Timer0_init(const TIMER0_config_Type *config_type){
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <Timer0_init+0x6>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0,FOC0);
    1948:	a3 e5       	ldi	r26, 0x53	; 83
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e3 e5       	ldi	r30, 0x53	; 83
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	80 68       	ori	r24, 0x80	; 128
    1954:	8c 93       	st	X, r24
    TCCR0=(TCCR0&0XF7)|((config_type->mode)<<WGM01);
    1956:	a3 e5       	ldi	r26, 0x53	; 83
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e3 e5       	ldi	r30, 0x53	; 83
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	28 2f       	mov	r18, r24
    1962:	27 7f       	andi	r18, 0xF7	; 247
    1964:	e9 81       	ldd	r30, Y+1	; 0x01
    1966:	fa 81       	ldd	r31, Y+2	; 0x02
    1968:	80 81       	ld	r24, Z
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	82 2b       	or	r24, r18
    197c:	8c 93       	st	X, r24
    TCCR0=(TCCR0&0XF8)|(config_type->prescalar);
    197e:	a3 e5       	ldi	r26, 0x53	; 83
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e3 e5       	ldi	r30, 0x53	; 83
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	98 2f       	mov	r25, r24
    198a:	98 7f       	andi	r25, 0xF8	; 248
    198c:	e9 81       	ldd	r30, Y+1	; 0x01
    198e:	fa 81       	ldd	r31, Y+2	; 0x02
    1990:	81 81       	ldd	r24, Z+1	; 0x01
    1992:	89 2b       	or	r24, r25
    1994:	8c 93       	st	X, r24
    TCNT0=config_type->initial_value;
    1996:	a2 e5       	ldi	r26, 0x52	; 82
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e9 81       	ldd	r30, Y+1	; 0x01
    199c:	fa 81       	ldd	r31, Y+2	; 0x02
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	8c 93       	st	X, r24
    if((config_type->mode)==1){
    19a2:	e9 81       	ldd	r30, Y+1	; 0x01
    19a4:	fa 81       	ldd	r31, Y+2	; 0x02
    19a6:	80 81       	ld	r24, Z
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	71 f4       	brne	.+28     	; 0x19c8 <Timer0_init+0x8e>
    	TIMSK|=(1<<OCIE0);
    19ac:	a9 e5       	ldi	r26, 0x59	; 89
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e9 e5       	ldi	r30, 0x59	; 89
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	82 60       	ori	r24, 0x02	; 2
    19b8:	8c 93       	st	X, r24
    	OCR0=config_type->compare_value;
    19ba:	ac e5       	ldi	r26, 0x5C	; 92
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	83 81       	ldd	r24, Z+3	; 0x03
    19c4:	8c 93       	st	X, r24
    19c6:	0c c0       	rjmp	.+24     	; 0x19e0 <Timer0_init+0xa6>
    }
    else if((config_type->mode)==0){
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	80 81       	ld	r24, Z
    19ce:	88 23       	and	r24, r24
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <Timer0_init+0xa6>
    	TIMSK|=(1<<TOIE0);
    19d2:	a9 e5       	ldi	r26, 0x59	; 89
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e9 e5       	ldi	r30, 0x59	; 89
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	81 60       	ori	r24, 0x01	; 1
    19de:	8c 93       	st	X, r24
    }
    }
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <Timer0_setCallBack>:
void Timer0_setCallBack(void(*a_ptr)(void))
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <Timer0_setCallBack+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	90 93 81 01 	sts	0x0181, r25
    1a00:	80 93 80 01 	sts	0x0180, r24
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <Timer0_Deinit>:
void Timer0_Deinit(void){
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
    1a16:	e2 e5       	ldi	r30, 0x52	; 82
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	10 82       	st	Z, r1
	TCCR0=0;
    1a1c:	e3 e5       	ldi	r30, 0x53	; 83
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	10 82       	st	Z, r1
	OCR0=0;
    1a22:	ec e5       	ldi	r30, 0x5C	; 92
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	10 82       	st	Z, r1
	TIMSK&=~(1<<OCIE0);
    1a28:	a9 e5       	ldi	r26, 0x59	; 89
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e9 e5       	ldi	r30, 0x59	; 89
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8d 7f       	andi	r24, 0xFD	; 253
    1a34:	8c 93       	st	X, r24
	TIMSK&=~(1<<TOIE0);
    1a36:	a9 e5       	ldi	r26, 0x59	; 89
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e9 e5       	ldi	r30, 0x59	; 89
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	8e 7f       	andi	r24, 0xFE	; 254
    1a42:	8c 93       	st	X, r24
}
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <TWI_init>:

#include "commonmacros.h"
#include <avr/io.h>

void TWI_init(const I2C_config_Type * config_ptr)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <TWI_init+0x6>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR =config_ptr->bit_rate ;
    1a58:	a0 e2       	ldi	r26, 0x20	; 32
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a60:	80 81       	ld	r24, Z
    1a62:	8c 93       	st	X, r24
	TWSR = 0x00;
    1a64:	e1 e2       	ldi	r30, 0x21	; 33
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (config_ptr->address_of_me<<1); // my address = 0x01 :)
    1a6a:	a2 e2       	ldi	r26, 0x22	; 34
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	81 81       	ldd	r24, Z+1	; 0x01
    1a74:	88 0f       	add	r24, r24
    1a76:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1a78:	e6 e5       	ldi	r30, 0x56	; 86
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	84 e0       	ldi	r24, 0x04	; 4
    1a7e:	80 83       	st	Z, r24
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <TWI_start>:

void TWI_start(void)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1a92:	e6 e5       	ldi	r30, 0x56	; 86
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	84 ea       	ldi	r24, 0xA4	; 164
    1a98:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a9a:	e6 e5       	ldi	r30, 0x56	; 86
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	88 23       	and	r24, r24
    1aa2:	dc f7       	brge	.-10     	; 0x1a9a <TWI_start+0x10>
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <TWI_stop>:

void TWI_stop(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ab2:	e6 e5       	ldi	r30, 0x56	; 86
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	84 e9       	ldi	r24, 0x94	; 148
    1ab8:	80 83       	st	Z, r24
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1acc:	e3 e2       	ldi	r30, 0x23	; 35
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ad4:	e6 e5       	ldi	r30, 0x56	; 86
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	84 e8       	ldi	r24, 0x84	; 132
    1ada:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1adc:	e6 e5       	ldi	r30, 0x56	; 86
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 23       	and	r24, r24
    1ae4:	dc f7       	brge	.-10     	; 0x1adc <TWI_writeByte+0x1c>
}
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1af6:	e6 e5       	ldi	r30, 0x56	; 86
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	84 ec       	ldi	r24, 0xC4	; 196
    1afc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1afe:	e6 e5       	ldi	r30, 0x56	; 86
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	dc f7       	brge	.-10     	; 0x1afe <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1b08:	e3 e2       	ldi	r30, 0x23	; 35
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
}
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b1c:	e6 e5       	ldi	r30, 0x56	; 86
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	84 e8       	ldi	r24, 0x84	; 132
    1b22:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b24:	e6 e5       	ldi	r30, 0x56	; 86
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 23       	and	r24, r24
    1b2c:	dc f7       	brge	.-10     	; 0x1b24 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1b2e:	e3 e2       	ldi	r30, 0x23	; 35
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
}
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1b44:	e1 e2       	ldi	r30, 0x21	; 33
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	88 7f       	andi	r24, 0xF8	; 248
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <UART_init>:
 */

#include "commonmacros.h"
#include "uart.h"
#include<avr/io.h>
void UART_init(const UART_config_Type*config_type){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <UART_init+0x6>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <UART_init+0x8>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1b68:	1a 82       	std	Y+2, r1	; 0x02
    1b6a:	19 82       	std	Y+1, r1	; 0x01
	UCSRA=(1<<U2X);
    1b6c:	eb e2       	ldi	r30, 0x2B	; 43
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	80 83       	st	Z, r24
	UCSRB=(1<<RXEN)|(1<<TXEN);
    1b74:	ea e2       	ldi	r30, 0x2A	; 42
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	88 e1       	ldi	r24, 0x18	; 24
    1b7a:	80 83       	st	Z, r24
	SET_BIT(UCSRC,URSEL);
    1b7c:	a0 e4       	ldi	r26, 0x40	; 64
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e0 e4       	ldi	r30, 0x40	; 64
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 68       	ori	r24, 0x80	; 128
    1b88:	8c 93       	st	X, r24
	UCSRC=((UCSRC&0XF9)|((config_type->number_of_bits)<<1));
    1b8a:	a0 e4       	ldi	r26, 0x40	; 64
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e0 e4       	ldi	r30, 0x40	; 64
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	28 2f       	mov	r18, r24
    1b96:	29 7f       	andi	r18, 0xF9	; 249
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	82 2b       	or	r24, r18
    1ba8:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0XF7)|((config_type->stop)<<3);
    1baa:	a0 e4       	ldi	r26, 0x40	; 64
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e0 e4       	ldi	r30, 0x40	; 64
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	27 7f       	andi	r18, 0xF7	; 247
    1bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bba:	fc 81       	ldd	r31, Y+4	; 0x04
    1bbc:	81 81       	ldd	r24, Z+1	; 0x01
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	82 2b       	or	r24, r18
    1bd0:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0XCF)|((config_type->barity)<<4);
    1bd2:	a0 e4       	ldi	r26, 0x40	; 64
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e0 e4       	ldi	r30, 0x40	; 64
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	28 2f       	mov	r18, r24
    1bde:	2f 7c       	andi	r18, 0xCF	; 207
    1be0:	eb 81       	ldd	r30, Y+3	; 0x03
    1be2:	fc 81       	ldd	r31, Y+4	; 0x04
    1be4:	80 81       	ld	r24, Z
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	82 95       	swap	r24
    1bec:	92 95       	swap	r25
    1bee:	90 7f       	andi	r25, 0xF0	; 240
    1bf0:	98 27       	eor	r25, r24
    1bf2:	80 7f       	andi	r24, 0xF0	; 240
    1bf4:	98 27       	eor	r25, r24
    1bf6:	82 2b       	or	r24, r18
    1bf8:	8c 93       	st	X, r24
	ubrr_value=(uint16)(((F_CPU)/(8UL*(config_type->baud_rate)))-1);
    1bfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfe:	83 81       	ldd	r24, Z+3	; 0x03
    1c00:	94 81       	ldd	r25, Z+4	; 0x04
    1c02:	a5 81       	ldd	r26, Z+5	; 0x05
    1c04:	b6 81       	ldd	r27, Z+6	; 0x06
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	aa 1f       	adc	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	aa 1f       	adc	r26, r26
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	9c 01       	movw	r18, r24
    1c20:	ad 01       	movw	r20, r26
    1c22:	80 e4       	ldi	r24, 0x40	; 64
    1c24:	92 e4       	ldi	r25, 0x42	; 66
    1c26:	af e0       	ldi	r26, 0x0F	; 15
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__udivmodsi4>
    1c32:	da 01       	movw	r26, r20
    1c34:	c9 01       	movw	r24, r18
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=ubrr_value;
    1c3c:	e9 e2       	ldi	r30, 0x29	; 41
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	80 83       	st	Z, r24
	UBRRH=ubrr_value>>8;
    1c44:	e0 e4       	ldi	r30, 0x40	; 64
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	89 2f       	mov	r24, r25
    1c4e:	99 27       	eor	r25, r25
    1c50:	80 83       	st	Z, r24
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <UART_sendByte>:
void UART_sendByte(uint8 data){
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    1c6c:	ec e2       	ldi	r30, 0x2C	; 44
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC));
    1c74:	eb e2       	ldi	r30, 0x2B	; 43
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	80 74       	andi	r24, 0x40	; 64
    1c80:	90 70       	andi	r25, 0x00	; 0
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	b9 f3       	breq	.-18     	; 0x1c74 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);
    1c86:	ab e2       	ldi	r26, 0x2B	; 43
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	eb e2       	ldi	r30, 0x2B	; 43
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	8c 93       	st	X, r24
	/*
	 while(BIT_IS_CLEAR(UCSRA,UDRE)){}
	 UDR=data;
	 */
}
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <UART_recieveByte>:
uint8 UART_recieveByte(void){
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1ca4:	eb e2       	ldi	r30, 0x2B	; 43
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 23       	and	r24, r24
    1cac:	dc f7       	brge	.-10     	; 0x1ca4 <UART_recieveByte+0x8>
	return UDR;
    1cae:	ec e2       	ldi	r30, 0x2C	; 44
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <UART_sendstring>:
void UART_sendstring(const uint8*str){
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <UART_sendstring+0x6>
    1cc0:	0f 92       	push	r0
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	9b 83       	std	Y+3, r25	; 0x03
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1cca:	19 82       	std	Y+1, r1	; 0x01
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <UART_sendstring+0x30>
	while(str[i]!='\0'){
		UART_sendByte(str[i]);
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	fc 01       	movw	r30, r24
    1cda:	e2 0f       	add	r30, r18
    1cdc:	f3 1f       	adc	r31, r19
    1cde:	80 81       	ld	r24, Z
    1ce0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_sendByte>
		i++;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,RXC));
	return UDR;
}
void UART_sendstring(const uint8*str){
	uint8 i = 0;
	while(str[i]!='\0'){
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	e2 0f       	add	r30, r18
    1cf8:	f3 1f       	adc	r31, r19
    1cfa:	80 81       	ld	r24, Z
    1cfc:	88 23       	and	r24, r24
    1cfe:	39 f7       	brne	.-50     	; 0x1cce <UART_sendstring+0x14>
		UART_sendByte(str[i]);
		i++;
	}
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <UART_recievestring>:
void UART_recievestring(uint8*str){
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <UART_recievestring+0xa>
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9b 83       	std	Y+3, r25	; 0x03
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1d20:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_recieveByte();
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2c:	8c 01       	movw	r16, r24
    1d2e:	02 0f       	add	r16, r18
    1d30:	13 1f       	adc	r17, r19
    1d32:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <UART_recieveByte>
    1d36:	f8 01       	movw	r30, r16
    1d38:	80 83       	st	Z, r24
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <UART_recievestring+0x4e>
	while(str[i]!='#'){
		i++;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	8f 5f       	subi	r24, 0xFF	; 255
    1d40:	89 83       	std	Y+1, r24	; 0x01
		str[i] =UART_recieveByte();
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	8c 01       	movw	r16, r24
    1d4e:	02 0f       	add	r16, r18
    1d50:	13 1f       	adc	r17, r19
    1d52:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <UART_recieveByte>
    1d56:	f8 01       	movw	r30, r16
    1d58:	80 83       	st	Z, r24
	}
}
void UART_recievestring(uint8*str){
	uint8 i=0;
	str[i]=UART_recieveByte();
	while(str[i]!='#'){
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	fc 01       	movw	r30, r24
    1d66:	e2 0f       	add	r30, r18
    1d68:	f3 1f       	adc	r31, r19
    1d6a:	80 81       	ld	r24, Z
    1d6c:	83 32       	cpi	r24, 0x23	; 35
    1d6e:	31 f7       	brne	.-52     	; 0x1d3c <UART_recievestring+0x30>
		i++;
		str[i] =UART_recieveByte();
	}
	str[i]='\0';
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e2 0f       	add	r30, r18
    1d7e:	f3 1f       	adc	r31, r19
    1d80:	10 82       	st	Z, r1
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	08 95       	ret

00001d92 <__udivmodsi4>:
    1d92:	a1 e2       	ldi	r26, 0x21	; 33
    1d94:	1a 2e       	mov	r1, r26
    1d96:	aa 1b       	sub	r26, r26
    1d98:	bb 1b       	sub	r27, r27
    1d9a:	fd 01       	movw	r30, r26
    1d9c:	0d c0       	rjmp	.+26     	; 0x1db8 <__udivmodsi4_ep>

00001d9e <__udivmodsi4_loop>:
    1d9e:	aa 1f       	adc	r26, r26
    1da0:	bb 1f       	adc	r27, r27
    1da2:	ee 1f       	adc	r30, r30
    1da4:	ff 1f       	adc	r31, r31
    1da6:	a2 17       	cp	r26, r18
    1da8:	b3 07       	cpc	r27, r19
    1daa:	e4 07       	cpc	r30, r20
    1dac:	f5 07       	cpc	r31, r21
    1dae:	20 f0       	brcs	.+8      	; 0x1db8 <__udivmodsi4_ep>
    1db0:	a2 1b       	sub	r26, r18
    1db2:	b3 0b       	sbc	r27, r19
    1db4:	e4 0b       	sbc	r30, r20
    1db6:	f5 0b       	sbc	r31, r21

00001db8 <__udivmodsi4_ep>:
    1db8:	66 1f       	adc	r22, r22
    1dba:	77 1f       	adc	r23, r23
    1dbc:	88 1f       	adc	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	1a 94       	dec	r1
    1dc2:	69 f7       	brne	.-38     	; 0x1d9e <__udivmodsi4_loop>
    1dc4:	60 95       	com	r22
    1dc6:	70 95       	com	r23
    1dc8:	80 95       	com	r24
    1dca:	90 95       	com	r25
    1dcc:	9b 01       	movw	r18, r22
    1dce:	ac 01       	movw	r20, r24
    1dd0:	bd 01       	movw	r22, r26
    1dd2:	cf 01       	movw	r24, r30
    1dd4:	08 95       	ret

00001dd6 <__prologue_saves__>:
    1dd6:	2f 92       	push	r2
    1dd8:	3f 92       	push	r3
    1dda:	4f 92       	push	r4
    1ddc:	5f 92       	push	r5
    1dde:	6f 92       	push	r6
    1de0:	7f 92       	push	r7
    1de2:	8f 92       	push	r8
    1de4:	9f 92       	push	r9
    1de6:	af 92       	push	r10
    1de8:	bf 92       	push	r11
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	ca 1b       	sub	r28, r26
    1e00:	db 0b       	sbc	r29, r27
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	09 94       	ijmp

00001e0e <__epilogue_restores__>:
    1e0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e10:	39 88       	ldd	r3, Y+17	; 0x11
    1e12:	48 88       	ldd	r4, Y+16	; 0x10
    1e14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e20:	b9 84       	ldd	r11, Y+9	; 0x09
    1e22:	c8 84       	ldd	r12, Y+8	; 0x08
    1e24:	df 80       	ldd	r13, Y+7	; 0x07
    1e26:	ee 80       	ldd	r14, Y+6	; 0x06
    1e28:	fd 80       	ldd	r15, Y+5	; 0x05
    1e2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e30:	b9 81       	ldd	r27, Y+1	; 0x01
    1e32:	ce 0f       	add	r28, r30
    1e34:	d1 1d       	adc	r29, r1
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	ed 01       	movw	r28, r26
    1e42:	08 95       	ret

00001e44 <_exit>:
    1e44:	f8 94       	cli

00001e46 <__stop_program>:
    1e46:	ff cf       	rjmp	.-2      	; 0x1e46 <__stop_program>
